<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  
  <groupId>edu.uw.pce.cp125</groupId>
  <artifactId>chat_networking</artifactId>
  <version>1.0.0</version>
  <packaging>jar</packaging>

  <name>CP125 Chat</name>
  <description>The CP125 assignments make a chat program</description>
  <inceptionYear>2015</inceptionYear>

  <dependencies>
    <dependency>
      <groupId>commons-cli</groupId>
      <artifactId>commons-cli</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  
  <build>
    <defaultGoal>compile</defaultGoal>
    <plugins>
      <plugin>
	<artifactId>maven-compiler-plugin</artifactId>
	<version>3.3</version>
      </plugin>


      <!-- 
	   We use the dependency plugin to copy all of our
	   dependencies (jars) from our local Maven repo to the local
	   project.  The default location is in ./targets.  We do this
	   so when the jar plugin builds up a classpath naming all the
	   dependent jars, all the jars are alongside one another, as
	   they have to be for a class-path entry in the manifest of a
	   jar. This approach makes it easy to run the program from a
	   shell script/batchfile/cmd line. You just name the local
	   jar on the classpath, and the manifest in that jar
	   'extends' the classpath by naming the other jars, which
	   MUST be located in the same directory as that first, local,
	   jar.  Then we can just say 'java -cp targets/localJar
	   className' and NOT have to name ALL the jars needed to run
	   the program.  I prefer this method to that using the
	   exec:goal maven plugin to run the code.
  -->
      
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-dependency-plugin</artifactId>
	<executions>
	  <execution>
	    <id>copy-dependencies</id>
	    <phase>package</phase>
	    <goals>
	      <goal>copy-dependencies</goal>
	    </goals>
	    <configuration>
	      <outputDirectory>${project.build.directory}</outputDirectory>
	    </configuration>
          </execution>
	</executions>
      </plugin>

      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-jar-plugin</artifactId>
	<version>2.6</version>
	<configuration>
	  <archive>
	    <manifest>
	      <!-- 
	      See how the jar manifest turns out when this option is used
	      -->
	      <addClasspath>true</addClasspath>
	    </manifest>
	  </archive>
	</configuration>
      </plugin>

      <plugin>
	<artifactId>maven-assembly-plugin</artifactId>
	<version>2.5.3</version>
	<configuration>
	  <descriptorRefs>
	    <descriptorRef>src</descriptorRef>
	  </descriptorRefs>
	  <formats>
	    <format>zip</format>
	  </formats>
	</configuration>
      </plugin>
    </plugins>
  </build>

</project>
